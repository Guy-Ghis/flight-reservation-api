/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Ticket
 */
export interface Ticket {
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    passengerName?: string;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    destination?: string;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    kickoff?: string;
    /**
     * 
     * @type {Date}
     * @memberof Ticket
     */
    bookingDate?: Date;
}

/**
 * Check if a given object implements the Ticket interface.
 */
export function instanceOfTicket(value: object): value is Ticket {
    return true;
}

export function TicketFromJSON(json: any): Ticket {
    return TicketFromJSONTyped(json, false);
}

export function TicketFromJSONTyped(json: any, ignoreDiscriminator: boolean): Ticket {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'passengerName': json['passengerName'] == null ? undefined : json['passengerName'],
        'destination': json['destination'] == null ? undefined : json['destination'],
        'kickoff': json['kickoff'] == null ? undefined : json['kickoff'],
        'bookingDate': json['bookingDate'] == null ? undefined : (new Date(json['bookingDate'])),
    };
}

export function TicketToJSON(json: any): Ticket {
    return TicketToJSONTyped(json, false);
}

export function TicketToJSONTyped(value?: Ticket | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'passengerName': value['passengerName'],
        'destination': value['destination'],
        'kickoff': value['kickoff'],
        'bookingDate': value['bookingDate'] == null ? undefined : ((value['bookingDate']).toISOString().substring(0,10)),
    };
}

